<br>
<br>
<br>
<br>
{{!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropper/2.3.4/cropper.min.css" /> --}}

<div class="container page  text-center w-25 pt-5 mt-5" style="background-color: white;">
    <h3 class="text-center mx-auto">Choose a profile pic</h3>
    <div class="form-group container w-75">
        <label for="file">Select Image</label>
        <input class="form-control box" accept="image/*" type="file" required id="file-input" value="file">
    </div>
    <div class="box-2">
        <div class="result"></div>
    </div>
    <!--rightbox-->
    <div class="box-2 img-result hide">
        <!-- result of crop -->
        <img class="cropped" src="" alt="" />
    </div>
    <!-- input file -->
    <div class="box">
        <div class="options hide">
            <label class="" hidden> Width</label>
            <input type="number" class="img-w w-25" value="300" min="100" max="1200" hidden />
        </div>
        <!-- save btn -->   
        <button class="btn save hide btn-primary my-2">Crop</button>
        <!-- download btn -->
        {{!-- <a href="" class="btn download hide btn-success" hidden>Download</a> --}}

        <form action="/crop-images" method="post">
            <input type="text" value="" name="image" id="image" hidden>
            <input type="text" value="{{user}}" name="user" hidden>
            <button type="submit" class="btn btn-success">Save</button>
        </form>

    </div>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/0.8.1/cropper.min.js"></script>
<script>

    let result = document.querySelector(".result"),
        img_result = document.querySelector(".img-result"),
        img_w = document.querySelector(".img-w"),
        img_h = document.querySelector(".img-h"),
        options = document.querySelector(".options"),
        save = document.querySelector(".save"),
        cropped = document.querySelector(".cropped"),
        dwn = document.querySelector(".download"),
        upload = document.querySelector("#file-input"),
        inputImg = document.getElementById('image')
    cropper = "";

    // on change show image with crop options
    upload.addEventListener("change", (e) => {
        if (e.target.files.length) {
            // start file reader
            const reader = new FileReader();
            reader.onload = (e) => {
                if (e.target.result) {
                    // create new image
                    let img = document.createElement("img");
                    img.id = "image";
                    img.src = e.target.result;
                    // clean result before
                    result.innerHTML = "";
                    // append new image
                    result.appendChild(img);
                    // show save btn and options
                    save.classList.remove("hide");
                    options.classList.remove("hide");
                    // init cropper
                    cropper = new Cropper(img);
                }
            };
            reader.readAsDataURL(e.target.files[0]);
        }
    })

    // save on click
    save.addEventListener("click", (e) => {
        e.preventDefault();
        // get result to data uri
        let imgSrc = cropper
            .getCroppedCanvas({
                width: img_w.value, // input value
            })
            .toDataURL();
        // remove hide class of img
        cropped.classList.remove("hide");
        img_result.classList.remove("hide");
        // show image cropped
        cropped.src = imgSrc;
        inputImg.value = imgSrc;
        console.log(cropped.src)
        dwn.classList.remove("hide");
        dwn.download = "imagename.png";
        dwn.setAttribute("href", imgSrc);


        var file = dataURLtoFile(imgSrc, 'new.png');
        console.log(file)
    });


    function dataURLtoFile(dataurl, filename) {

        var arr = dataurl.split(','),
            mime = arr[0].match(/:(.*?);/)[1],
            bstr = atob(arr[1]),
            n = bstr.length,
            u8arr = new Uint8Array(n);

        while (n--) {
            u8arr[n] = bstr.charCodeAt(n);
        }

        return new File([u8arr], filename, { type: mime });
    }
</script>